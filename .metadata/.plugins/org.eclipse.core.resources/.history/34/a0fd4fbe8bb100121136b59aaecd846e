package Main;

import java.io.File;
import java.io.IOException;

import com.amazonaws.AmazonClientException;
import com.amazonaws.AmazonServiceException;
import com.amazonaws.auth.AWSCredentials;
import com.amazonaws.auth.PropertiesCredentials;
import com.amazonaws.services.s3.AmazonS3;
import com.amazonaws.services.s3.AmazonS3Client;
import com.amazonaws.services.s3.model.Bucket;
import com.amazonaws.services.s3.model.PutObjectRequest;
import com.amazonaws.services.sqs.AmazonSQS;
import com.amazonaws.services.sqs.AmazonSQSClient;
import com.amazonaws.services.sqs.model.CreateQueueRequest;
import com.amazonaws.services.sqs.model.DeleteQueueRequest;
import com.amazonaws.services.sqs.model.SendMessageRequest;

public class Local {
	private PropertiesCredentials Pc;
	private AWSCredentials Credentials;
	private AmazonSQS AmazonSqs;
	private AmazonS3 S3;
	private String LocalToManagerUrl;
	private String ManagerToWorkerUrl;
	private String WorkerToManagerUrl;
	private String MesseagesQueueUrl;
	private String BucketName;
	private String KeyBucketName;

	public Local() {
		try {
			Pc = new PropertiesCredentials(
					Local.class
							.getResourceAsStream("../AwsCredentials.properties"));
		} catch (IOException e) {
			e.printStackTrace();
		}
		Credentials = Pc;
		AmazonSqs = new AmazonSQSClient(Pc);
		S3 = new AmazonS3Client(Credentials);

	}

	public String userData() {
		String s;
		s = "#!/bin/bash\n+";

		// set -e -x
		// export DEBIAN_FRONTEND=noninteractive
		// apt-get update && apt-get upgrade -y
		// tasksel install lamp-server
		// echo "Please remember to set the MySQL root password!"";
		return s;
	}

	public void createBucketAndUploadFile(File file) {

		BucketName = Credentials.getAWSAccessKeyId()
				+ "."
				+ ConstantProvider.DIRECTORY_NAME.replace('\\', '_')
						.replace('/', '_').replace(':', '_');
		BucketName = BucketName.toLowerCase();
		KeyBucketName = "distributed";

		System.out.println("===========================================");
		System.out.println("Getting Started with Amazon S3");
		System.out.println("===========================================\n");

		try {
			System.out.println("Creating bucket " + BucketName + "\n");
			S3.createBucket(BucketName);

			/*
			 * List the buckets in your account
			 */
			System.out.println("Listing buckets");
			for (Bucket bucket : S3.listBuckets()) {
				System.out.println(" - " + bucket.getName());
			}
			System.out.println();

			System.out.println("Uploading a new object to S3 from a file\n");
			S3.putObject(new PutObjectRequest(BucketName, KeyBucketName, file));

			System.out.println();

		} catch (AmazonServiceException ase) {
			System.out
					.println("Caught an AmazonServiceException, which means your request made it "
							+ "to Amazon S3, but was rejected with an error response for some reason.");
			System.out.println("Error Message:    " + ase.getMessage());
			System.out.println("HTTP Status Code: " + ase.getStatusCode());
			System.out.println("AWS Error Code:   " + ase.getErrorCode());
			System.out.println("Error Type:       " + ase.getErrorType());
			System.out.println("Request ID:       " + ase.getRequestId());
		} catch (AmazonClientException ace) {
			System.out
					.println("Caught an AmazonClientException, which means the client encountered "
							+ "a serious internal problem while trying to communicate with S3, "
							+ "such as not being able to access the network.");
			System.out.println("Error Message: " + ace.getMessage());
		}

	}

	public void createQueues() {
		System.out.println("Create Queues");
		try {
			CreateQueueRequest LocalToManagerQueueRequest = new CreateQueueRequest()
					.withQueueName("LocalToManagerQueue");
			LocalToManagerUrl = AmazonSqs.createQueue(
					LocalToManagerQueueRequest).getQueueUrl();

			CreateQueueRequest ManagerToWorkerQueueRequest = new CreateQueueRequest()
					.withQueueName("ManagerToWorkerQueue");
			ManagerToWorkerUrl = AmazonSqs.createQueue(
					ManagerToWorkerQueueRequest).getQueueUrl();

			CreateQueueRequest WorkerToManagerQueueRequest = new CreateQueueRequest()
					.withQueueName("WorkerToManager");
			WorkerToManagerUrl = AmazonSqs.createQueue(
					WorkerToManagerQueueRequest).getQueueUrl();

			CreateQueueRequest MesseagesQueueUrlRequest = new CreateQueueRequest()
					.withQueueName("MesseagesQueue");
			MesseagesQueueUrl = AmazonSqs.createQueue(MesseagesQueueUrlRequest)
					.getQueueUrl();
			System.out.println("Queues Created");

		} catch (AmazonServiceException ase) {
			System.out
					.println("Caught an AmazonServiceException, which means your request made it "
							+ "to Amazon SQS, but was rejected with an error response for some reason.");
			System.out.println("Error Message:    " + ase.getMessage());
			System.out.println("HTTP Status Code: " + ase.getStatusCode());
			System.out.println("AWS Error Code:   " + ase.getErrorCode());
			System.out.println("Error Type:       " + ase.getErrorType());
			System.out.println("Request ID:       " + ase.getRequestId());
		} catch (AmazonClientException ace) {
			System.out
					.println("Caught an AmazonClientException, which means the client encountered "
							+ "a serious internal problem while trying to communicate with SQS, such as not "
							+ "being able to access the network.");
			System.out.println("Error Message: " + ace.getMessage());
		}

	}

	public void deleteQueues() {

		System.out.println("Deleting the queues.\n");
		AmazonSqs.deleteQueue(new DeleteQueueRequest(LocalToManagerUrl));
		AmazonSqs.deleteQueue(new DeleteQueueRequest(ManagerToWorkerUrl));
		AmazonSqs.deleteQueue(new DeleteQueueRequest(WorkerToManagerUrl));

	}

	public void sendMessege(String messege, String to) {
		System.out.println("Send messege " + messege " to " + to);
		AmazonSqs.sendMessage(new SendMessageRequest(to, messege));

	}

	public PropertiesCredentials getPc() {
		return Pc;
	}

	public void setPc(PropertiesCredentials pc) {
		Pc = pc;
	}

	public AWSCredentials getCredentials() {
		return Credentials;
	}

	public void setCredentials(AWSCredentials credentials) {
		Credentials = credentials;
	}

	public AmazonSQS getAmazonSqs() {
		return AmazonSqs;
	}

	public void setAmazonSqs(AmazonSQS amazonSqs) {
		AmazonSqs = amazonSqs;
	}

	public AmazonS3 getS3() {
		return S3;
	}

	public void setS3(AmazonS3 s3) {
		S3 = s3;
	}

	public String getLocalToManagerUrl() {
		return LocalToManagerUrl;
	}

	public void setLocalToManagerUrl(String localToManagerUrl) {
		LocalToManagerUrl = localToManagerUrl;
	}

	public String getManagerToWorkerUrl() {
		return ManagerToWorkerUrl;
	}

	public void setManagerToWorkerUrl(String managerToWorkerUrl) {
		ManagerToWorkerUrl = managerToWorkerUrl;
	}

	public String getWorkerToManagerUrl() {
		return WorkerToManagerUrl;
	}

	public void setWorkerToManagerUrl(String workerToManagerUrl) {
		WorkerToManagerUrl = workerToManagerUrl;
	}

	public String getBucketName() {
		return BucketName;
	}

	public void setBucketName(String bucketName) {
		BucketName = bucketName;
	}

	public String getKeyBucketName() {
		return KeyBucketName;
	}

	public void setKeyBucketName(String keyBucketName) {
		KeyBucketName = keyBucketName;
	}

	public static void main(String[] args) throws Exception {
		Local local = new Local();
		File file = new File("TxtImage/imageTxt.txt");
		local.createBucketAndUploadFile(file);
		local.createQueues();
		local.sendMessege(
				local.getBucketName() + " " + local.getKeyBucketName(),
				ConstantProvider.LOCAL_TO_MANAGER_QUEUE);

	}

}
